library ieee;
use ieee.std_logic_1164.all;

entity tb_PWM is
end tb_PWM;

architecture tb of tb_PWM is

    component PWM
        port (clk        : in std_logic;
              rst        : in std_logic;
              pwm_out    : out std_logic;
              duty_cycle : in std_logic_vector (7 downto 0));
    end component;

    signal clk        : std_logic;
    signal rst        : std_logic;
    signal pwm_out    : std_logic;
    signal duty_cycle : std_logic_vector (7 downto 0);

    constant TbPeriod : time := 10 ns; -- EDIT Put right period here
    signal TbClock : std_logic := '0';
    signal TbSimEnded : std_logic := '0';

begin

    dut : PWM
    port map (clk        => clk,
              rst        => rst,
              pwm_out    => pwm_out,
              duty_cycle => duty_cycle);

    -- Clock generation
    TbClock <= not TbClock after TbPeriod/2 when TbSimEnded /= '1' else '0';

    -- EDIT: Check that clk is really your main clock signal
    clk <= TbClock;

    stimuli : process
    begin
        -- EDIT Adapt initialization as needed
        duty_cycle <= ("00001000");
        wait for 10ns;
        

        -- Reset generation
        -- EDIT: Check that rst is really your reset signal
        rst <= '1';
        wait for 100 ns;
        rst <= '0';
        wait for 100 ns;

        -- EDIT Add stimuli here
        wait for 10 * TbPeriod;
        duty_cycle <= ("00000001");        
        wait for 100ns;
        
        duty_cycle <= ("00001000");
        wait for 10 * TbPeriod;
        -- Stop the clock and hence terminate the simulation
        TbSimEnded <= '1';
        wait;
    end process;

end tb;

-- Configuration block below is required by some simulators. Usually no need to edit.

configuration cfg_tb_PWM of tb_PWM is
    for tb
    end for;
end cfg_tb_PWM;
